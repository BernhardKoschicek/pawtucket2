cache_timeout = 0

#
# 
#
browseTypes = {
	objects = {
		displayName = _(Artworks),
		labelSingular = _("artwork"),
 		labelPlural = _("artworks"),
		table = ca_objects,
		
		restrictToTypes = [sk_artwork],
		#dontExpandTypesHierarchically = true,
		availableFacets = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			images = {},
		},
		sortBy = {
			Title = ca_object_labels.name,
			Date = ca_objects.object_date,
			Artist = ca_entity_labels.surname;ca_entity_labels.forename,
		},
		# --- default sort direction for the sortBy options
		sortDirection = {
			Title = asc,
			Date = asc,
			Artist = asc,
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	collections = {
		displayName = _(Collections),
		labelSingular = _("collection"),
 		labelPlural = _("collections"),
		table = ca_collections,
		restrictToTypes = [],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			images = {}, 
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Identifier = ca_collections.idno,
			Name = ca_collection_labels.name
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	entities = {
		displayName = _(Artists),
		labelSingular = _("artist"),
 		labelPlural = _("artists"),
		table = ca_entities,
		restrictToTypes = [],
		showLetterBarFrom = ca_entity_labels.surname,
		showLetterBarSorts = [ca_entity_labels.surname;ca_entity_labels.forename],
		options = {
			selectMediaUsingRelationshipTypes = [artist]
		}
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = { 
			list = {}
		},
		
		sortBy = {
			Name = ca_entity_labels.surname;ca_entity_labels.forename
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	},
	exhibitions = {
		displayName = _(Exhibitions),
		labelSingular = _("exhibition"),
 		labelPlural = _("exhibitions"),
		table = ca_occurrences,
		restrictToTypes = [exhibition],
		showLetterBarFrom = ca_occurrence_labels.name,
		showLetterBarSorts = [ca_occurrence_labels.name],
		
		# formats available for display of results
		# possible values are: images, list, timeline, map
		views = {
			list = {}
		},
		
		sortBy = {
			Relevance = _natural,
			Name = ca_occurrence_labels.name, 
			Date = ca_occurrences.exhibition_dates
		},
		# --- sortControlType = dropdown or list
		sortControlType = dropdown
	}
}

ca_objects = {
	name = _("Objects"),
	facets = {	
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_objects_x_entities,
			restrict_to_types = [],
			restrict_to_relationship_types = [artist],
			
			individual_group_display = 1,
			
			groupings = {
				label = _("Name"), 
				relationship_types = _("Role"),
				type = _("Type")
			},
			group_mode = alphabetical,
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("artist"),
			label_plural = _("artist"),
			description = _("Find objects according to the people associated with your records.  You can browse by name&#44; role&#44; or entity type according to your configuration."),
		},
		artwork_facet = {
			type = attribute,
			element_code = artwork_type,
			
			group_mode = none,
			
			label_singular = _("type"),
			label_plural = _("types"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
		decade_facet = {
			type = normalizedDates,
			element_code = object_date,
			normalization = decades,
			
			group_mode = none,
			
			label_singular = _("decade"),
			label_plural = _("decades"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},
		year_facet = {
			type = normalizedDates,
			element_code = object_date,
			requires = decade_facet,
			normalization = years,
			
			group_mode = none,
			
			label_singular = _("year"),
			label_plural = _("years"),
			description = _("Find objects according to associated dates.  You can normalize these dates by year&#44; decade or century."),			
		},	
		occurrence_facet = {
			type = authority,
			table = ca_occurrences,
			generate_facets_for_types = 1,
			relationship_table = ca_objects_x_occurrences,
			restrict_to_types = [],
			
			individual_group_display = 1,
			
			show_all_when_first_facet = 0,
			
			groupings = {
				label = _("Name"), 
				ca_attribute_dates_value:years = _("Years")
			},
			
			group_mode = alphabetical,
			
			label_singular = _("occurrence"),
			label_plural = _("occurrences"),
			description = _("Find objects by Occurrences associated with your records&#44; such as historical events&#44; productions&#44; and other record types in your collection."),
		},
	}
}

ca_entities = {
	name = _("Entities"),
	facets = {
#		occurrence_facet = {
#			type = authority,
##			table = ca_occurrences,
#			generate_facets_for_types = 1,
#			relationship_table = ca_entities_x_occurrences,
#			restrict_to_types = [],
			
#			group_mode = alphabetical,
			
#			indefinite_article = an,
#			label_singular = _("occurrence"),
#			label_plural = _("occurrences")
#		},
#		gender_facet = {
#			type = attribute,
#			element_code = gender,
			
#			group_mode = none,
			
#			label_singular = _("gender"),
#			label_plural = _("genders")
#		},
#		nationality_facet = {
#			type = attribute,
#			element_code = nationality,
			
#			group_mode = none,
			
#			label_singular = _("nationality"),
#			label_plural = _("nationalities")
#		}		
	}
}

ca_occurrences = {
	name = _("Other authorities"),
	facets = {
		entity_facet = {
			# 'type' can equal authority, attribute, fieldList, normalizedDates
			type = authority,		
			table = ca_entities,
			relationship_table = ca_entities_x_occurrences,
			restrict_to_types = [],
			restrict_to_relationship_types = [venue],
			
			group_mode = alphabetical,
			
			order_by_label_fields = [surname, forename, middlename],
			
			indefinite_article = an,
			label_singular = _("venue"),
			label_plural = _("venues")
		},
		solo_facet = {
			type = attribute,
			element_code = solo_group,
			
			group_mode = none,
			
			label_singular = _("type"),
			label_plural = _("types")
		},
		decade_facet = {
			type = normalizedDates,
			element_code = exhibition_dates,
			normalization = decades,
			
			group_mode = alphabetical,
			
			label_singular = _("decade"),
			label_plural = _("decades")
		},				
		year_facet = {
			type = normalizedDates,
			element_code = exhibition_dates,
			normalization = years,
			requires = decade_facet,
			
			group_mode = alphabetical,
			
			label_singular = _("year"),
			label_plural = _("years")
		},
	}
}

views = {
	images = {
		icon = glyphicon-th
	},
	list = {
		icon = glyphicon-list
	},
	timeline = {
		icon = glyphicon-time
	},
	map = {
		icon = glyphicon-globe
	}
}

# --- text for Browse menu item, default is "Browse" 
browse_menu_button_text = 

# --- default number of results per page/ajax load
defaultHitsPerBlock = 36

# --- set to list to show dropdown with links to each configured browse or a single Browse nav link when one browse is configured
browseMenuFormat =

# --- set if you don't want the browse menu to be preloaded with facets for the first browse type on open
dontPreloadBrowseMenu = 1

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-8 col-md-8 col-lg-8
result_col_class = col-sm-8 col-md-9 col-lg-9

# --- refine_col_class -> boostrap col class to assign to refine col - defaults to: col-sm-4 col-md-3 col-md-offset-1 col-lg-3 col-lg-offset-1
refine_col_class = col-sm-4 col-md-3 col-lg-3 